package main

import (
	"fmt"
	"sync"

	"cloud.google.com/aoc2019/day7/intcode"
)

func main() {
	input := `3,8,1001,8,10,8,105,1,0,0,21,46,67,76,97,118,199,280,361,442,99999,3,9,1002,9,3,9,101,4,9,9,102,3,9,9,1001,9,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,101,5,9,9,1002,9,2,9,101,2,9,9,4,9,99,3,9,101,4,9,9,4,9,99,3,9,1001,9,4,9,102,2,9,9,1001,9,4,9,1002,9,5,9,4,9,99,3,9,102,3,9,9,1001,9,2,9,1002,9,3,9,1001,9,3,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,99`
	pgm := intcode.Compile(input)
	maxThrust := 0
	maxPhase := [5]int{}
	p := [5]int{}
	for p[0] = 5; p[0] < 10; p[0]++ {
		for p[1] = 5; p[1] < 10; p[1]++ {
			for p[2] = 5; p[2] < 10; p[2]++ {
				for p[3] = 5; p[3] < 10; p[3]++ {
					for p[4] = 5; p[4] < 10; p[4]++ {
						if unique(p) {
							t := runAmps(pgm, p)
							if t > maxThrust {
								maxThrust = t
								for i := 0; i < 5; i++ {
									maxPhase[i] = p[i]
								}
							}
						}
					}
				}
			}
		}
	}
	fmt.Println(maxThrust, maxPhase)
}

func unique(p [5]int) bool {
	digits := [10]bool{}
	digits[p[0]] = true
	for i := 1; i < len(p); i++ {
		if digits[p[i]] {
			return false
		}
		digits[p[i]] = true
	}
	return true
}

func runAmps(pgm *intcode.Program, phases [5]int) int {
	var (
		vm [5]*intcode.VM
		c  [5]chan int
		wg sync.WaitGroup
	)
	c[0] = make(chan int, 1)
	c[0] <- 0
	for i := 1; i < 5; i++ {
		c[i] = make(chan int)
	}
	vm[0] = intcode.NewVM(1, pgm, phases[0], c[0], c[1])
	vm[1] = intcode.NewVM(2, pgm, phases[1], c[1], c[2])
	vm[2] = intcode.NewVM(3, pgm, phases[2], c[2], c[3])
	vm[3] = intcode.NewVM(4, pgm, phases[3], c[3], c[4])
	vm[4] = intcode.NewVM(5, pgm, phases[4], c[4], c[0])
	wg.Add(5)
	for i := 0; i < 5; i++ {
		go func(x int) {
			vm[x].Pgm.Debug(false)
			vm[x].ExecPgm()
			wg.Done()
		}(i)
	}
	wg.Wait()
	t := <-c[0]
	return t
}

package main

import (
	"fmt"

	"cloud.google.com/aoc2019/day7/intcode"
)

func main() {
	input := `3,8,1001,8,10,8,105,1,0,0,21,46,67,76,97,118,199,280,361,442,99999,3,9,1002,9,3,9,101,4,9,9,102,3,9,9,1001,9,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,101,5,9,9,1002,9,2,9,101,2,9,9,4,9,99,3,9,101,4,9,9,4,9,99,3,9,1001,9,4,9,102,2,9,9,1001,9,4,9,1002,9,5,9,4,9,99,3,9,102,3,9,9,1001,9,2,9,1002,9,3,9,1001,9,3,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,99`
	pgm := intcode.Compile(input)
	maxThrust := 0
	maxPhase := [5]int{}
	p := [5]int{}
	for p[0] = 0; p[0] < 5; p[0]++ {
		for p[1] = 0; p[1] < 5; p[1]++ {
			for p[2] = 0; p[2] < 5; p[2]++ {
				for p[3] = 0; p[3] < 5; p[3]++ {
					for p[4] = 0; p[4] < 5; p[4]++ {
						t := 0
						t = runAmp(pgm, p[0], t)
						t = runAmp(pgm, p[1], t)
						t = runAmp(pgm, p[2], t)
						t = runAmp(pgm, p[3], t)
						t = runAmp(pgm, p[4], t)
						if t > maxThrust && unique(p) {
							maxThrust = t
							for i := 0; i < 5; i++ {
								maxPhase[i] = p[i]
							}
						}
					}
				}
			}
		}
	}
	fmt.Println(maxThrust, maxPhase)
}

func unique(p [5]int) bool {
	digits := [5]bool{}
	digits[p[0]] = true
	for i := 1; i < len(p); i++ {
		if digits[p[i]] {
			return false
		}
		digits[p[i]] = true
	}
	return true
}

func runAmp(pgm *intcode.Program, phase int, inputThrust int) int {
	buff := intcode.InputBuffer{}
	buff.Push(phase)
	buff.Push(inputThrust)
	temp := pgm.Copy()
	if err := temp.ExecPgm(buff); (err != nil) != false {
		panic(err)
	}
	t, err := temp.GetOutput()
	if err != nil {
		panic(err)
	}
	return t
}
